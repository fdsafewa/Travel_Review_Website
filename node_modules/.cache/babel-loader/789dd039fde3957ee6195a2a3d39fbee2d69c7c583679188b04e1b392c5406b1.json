{"ast":null,"code":"// jquery.tweet.js - See http://tweet.seaofclouds.com/ or https://github.com/seaofclouds/tweet for more info\n// Copyright (c) 2008-2012 Todd Matthews & Steve Purcell\n// Modified by Stan Scates for https://github.com/StanScates/Tweet.js-Mod\n\n(function (factory) {\n  if (typeof define === 'function' && define.amd) define(['jquery'], factory); // AMD support for RequireJS etc.\n  else factory(jQuery);\n})(function ($) {\n  $.fn.tweet = function (o) {\n    var s = $.extend({\n      modpath: \"php/twitter/cws_tweet.php\",\n      // [string]\t relative URL to Tweet.js mod (see https://github.com/StanScates/Tweet.js-Mod)\n      username: null,\n      // [string or array] required unless using the 'query' option; one or more twitter screen names (use 'list' option for multiple names, where possible)\n      list_id: null,\n      // [integer]\tID of list to fetch when using list functionality\n      list: null,\n      // [string]\t optional slug of list belonging to username\n      favorites: false,\n      // [boolean]\tdisplay the user's favorites instead of his tweets\n      query: null,\n      // [string]\t optional search query (see also: http://search.twitter.com/operators)\n      avatar_size: null,\n      // [integer]\theight and width of avatar if displayed (48px max)\n      count: 3,\n      // [integer]\thow many tweets to display?\n      fetch: null,\n      // [integer]\thow many tweets to fetch via the API (set this higher than 'count' if using the 'filter' option)\n      page: 1,\n      // [integer]\twhich page of results to fetch (if count != fetch, you'll get unexpected results)\n      retweets: true,\n      // [boolean]\twhether to fetch (official) retweets (not supported in all display modes)\n      intro_text: null,\n      // [string]\t do you want text BEFORE your your tweets?\n      outro_text: null,\n      // [string]\t do you want text AFTER your tweets?\n      join_text: null,\n      // [string]\t optional text in between date and tweet, try setting to \"auto\"\n      auto_join_text_default: \"i said,\",\n      // [string]\t auto text for non verb: \"i said\" bullocks\n      auto_join_text_ed: \"i\",\n      // [string]\t auto text for past tense: \"i\" surfed\n      auto_join_text_ing: \"i am\",\n      // [string]\t auto tense for present tense: \"i was\" surfing\n      auto_join_text_reply: \"i replied to\",\n      // [string]\t auto tense for replies: \"i replied to\" @someone \"with\"\n      auto_join_text_url: \"i was looking at\",\n      // [string]\t auto tense for urls: \"i was looking at\" http:...\n      loading_text: null,\n      // [string]\t optional loading text, displayed while tweets load\n      refresh_interval: null,\n      // [integer]\toptional number of seconds after which to reload tweets\n      twitter_url: \"twitter.com\",\n      // [string]\t custom twitter url, if any (apigee, etc.)\n      twitter_api_url: \"api.twitter.com\",\n      // [string]\t custom twitter api url, if any (apigee, etc.)\n      twitter_search_url: \"api.twitter.com\",\n      // [string]\t custom twitter search url, if any (apigee, etc.)\n      template: \"{avatar}{time}{join}{text}\",\n      // [string or function] template used to construct each tweet <li> - see code for available vars\n      comparator: function (tweet1, tweet2) {\n        // [function] comparator used to sort tweets (see Array.sort)\n        return tweet2[\"tweet_time\"] - tweet1[\"tweet_time\"];\n      },\n      filter: function (tweet) {\n        // [function] whether or not to include a particular tweet (be sure to also set 'fetch')\n        return true;\n      }\n      // You can attach callbacks to the following events using jQuery's standard .bind() mechanism:\n      //\t \"loaded\" -- triggered when tweets have been fetched and rendered\n    }, o);\n\n    // See http://daringfireball.net/2010/07/improved_regex_for_matching_urls\n    var url_regexp = /\\b((?:[a-z][\\w-]+:(?:\\/{1,3}|[a-z0-9%])|www\\d{0,3}[.]|[a-z0-9.\\-]+[.][a-z]{2,4}\\/)(?:[^\\s()<>]+|\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\))+(?:\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\)|[^\\s`!()\\[\\]{};:'\".,<>?«»“”‘’]))/gi;\n\n    // Expand values inside simple string templates with {placeholders}\n    function t(template, info) {\n      if (typeof template === \"string\") {\n        var result = template;\n        for (var key in info) {\n          var val = info[key];\n          result = result.replace(new RegExp('{' + key + '}', 'g'), val === null ? '' : val);\n        }\n        return result;\n      } else return template(info);\n    }\n    // Export the t function for use when passing a function as the 'template' option\n    $.extend({\n      tweet: {\n        t: t\n      }\n    });\n    function replacer(regex, replacement) {\n      return function () {\n        var returning = [];\n        this.each(function () {\n          returning.push(this.replace(regex, replacement));\n        });\n        return $(returning);\n      };\n    }\n    function escapeHTML(s) {\n      return s.replace(/</g, \"&lt;\").replace(/>/g, \"^&gt;\");\n    }\n    $.fn.extend({\n      linkUser: replacer(/(^|[\\W])@(\\w+)/gi, \"$1<span class=\\\"at\\\">@</span><a href=\\\"http://\" + s.twitter_url + \"/$2\\\">$2</a>\"),\n      // Support various latin1 (\\u00**) and arabic (\\u06**) alphanumeric chars\n      linkHash: replacer(/(?:^| )[\\#]+([\\w\\u00c0-\\u00d6\\u00d8-\\u00f6\\u00f8-\\u00ff\\u0600-\\u06ff]+)/gi, ' <a href=\"https://twitter.com/search?q=%23$1' + (s.username && s.username.length == 1 && !s.list ? '&from=' + s.username.join(\"%2BOR%2B\") : '') + '\" class=\"tweet_hashtag\">#$1</a>'),\n      makeHeart: replacer(/(&lt;)+[3]/gi, \"<tt class='heart'>&#x2665;</tt>\")\n    });\n    function linkURLs(text, entities) {\n      return text.replace(url_regexp, function (match) {\n        var url = /^[a-z]+:/i.test(match) ? match : \"http://\" + match;\n        var text = match;\n        for (var i = 0; i < entities.length; ++i) {\n          var entity = entities[i];\n          if (entity.url == url && entity.expanded_url) {\n            url = entity.expanded_url;\n            text = entity.display_url;\n            break;\n          }\n        }\n        return \"<a href=\\\"\" + escapeHTML(url) + \"\\\">\" + escapeHTML(text) + \"</a>\";\n      });\n    }\n    function parse_date(date_str) {\n      // The non-search twitter APIs return inconsistently-formatted dates, which Date.parse\n      // cannot handle in IE. We therefore perform the following transformation:\n      // \"Wed Apr 29 08:53:31 +0000 2009\" => \"Wed, Apr 29 2009 08:53:31 +0000\"\n      return Date.parse(date_str.replace(/^([a-z]{3})( [a-z]{3} \\d\\d?)(.*)( \\d{4})$/i, '$1,$2$4$3'));\n    }\n    function relative_time(date) {\n      var relative_to = arguments.length > 1 ? arguments[1] : new Date();\n      var delta = parseInt((relative_to.getTime() - date) / 1000, 10);\n      var r = '';\n      if (delta < 1) {\n        r = 'just now';\n      } else if (delta < 60) {\n        r = delta + ' seconds ago';\n      } else if (delta < 120) {\n        r = 'about a minute ago';\n      } else if (delta < 45 * 60) {\n        r = 'about ' + parseInt(delta / 60, 10).toString() + ' minutes ago';\n      } else if (delta < 2 * 60 * 60) {\n        r = 'about an hour ago';\n      } else if (delta < 24 * 60 * 60) {\n        r = 'about ' + parseInt(delta / 3600, 10).toString() + ' hours ago';\n      } else if (delta < 48 * 60 * 60) {\n        r = 'about a day ago';\n      } else {\n        r = 'about ' + parseInt(delta / 86400, 10).toString() + ' days ago';\n      }\n      return r;\n    }\n    function build_auto_join_text(text) {\n      if (text.match(/^(@([A-Za-z0-9-_]+)) .*/i)) {\n        return s.auto_join_text_reply;\n      } else if (text.match(url_regexp)) {\n        return s.auto_join_text_url;\n      } else if (text.match(/^((\\w+ed)|just) .*/im)) {\n        return s.auto_join_text_ed;\n      } else if (text.match(/^(\\w*ing) .*/i)) {\n        return s.auto_join_text_ing;\n      } else {\n        return s.auto_join_text_default;\n      }\n    }\n    function build_api_request() {\n      var modpath = s.modpath,\n        count = s.fetch === null ? s.count : s.fetch,\n        defaults = {\n          include_entities: 1\n        };\n      if (s.list) {\n        return {\n          host: s.twitter_api_url,\n          url: \"/1.1/lists/statuses.json\",\n          parameters: $.extend({}, defaults, {\n            list_id: s.list_id,\n            slug: s.list,\n            owner_screen_name: s.username,\n            page: s.page,\n            count: count,\n            include_rts: s.retweets ? 1 : 0\n          })\n        };\n      } else if (s.favorites) {\n        return {\n          host: s.twitter_api_url,\n          url: \"/1.1/favorites/list.json\",\n          parameters: $.extend({}, defaults, {\n            list_id: s.list_id,\n            screen_name: s.username,\n            page: s.page,\n            count: count\n          })\n        };\n      } else if (s.query === null && s.username.length === 1) {\n        return {\n          host: s.twitter_api_url,\n          url: \"/1.1/statuses/user_timeline.json\",\n          parameters: $.extend({}, defaults, {\n            screen_name: s.username,\n            page: s.page,\n            count: count,\n            include_rts: s.retweets ? 1 : 0\n          })\n        };\n      } else {\n        var query = s.query || 'from:' + s.username.join(' OR from:');\n        return {\n          host: s.twitter_search_url,\n          url: \"/1.1/search/tweets.json\",\n          parameters: $.extend({}, defaults, {\n            q: query,\n            count: count\n          })\n        };\n      }\n    }\n    function extract_avatar_url(item, secure) {\n      if (secure) {\n        return 'user' in item ? item.user.profile_image_url_https : extract_avatar_url(item, false).replace(/^http:\\/\\/[a-z0-9]{1,3}\\.twimg\\.com\\//, \"https://s3.amazonaws.com/twitter_production/\");\n      } else {\n        return item.profile_image_url || item.user.profile_image_url;\n      }\n    }\n\n    // Convert twitter API objects into data available for\n    // constructing each tweet <li> using a template\n    function extract_template_data(item) {\n      var o = {};\n      o.item = item;\n      o.source = item.source;\n      // The actual user name is not returned by all Twitter APIs, so please do not file an issue if it is empty.\n      o.name = item.from_user_name || item.user.name;\n      o.screen_name = item.from_user || item.user.screen_name;\n      o.avatar_size = s.avatar_size;\n      o.avatar_url = extract_avatar_url(item, document.location.protocol === 'https:');\n      o.retweet = typeof item.retweeted_status != 'undefined';\n      o.tweet_time = parse_date(item.created_at);\n      o.join_text = s.join_text == \"auto\" ? build_auto_join_text(item.text) : s.join_text;\n      o.tweet_id = item.id_str;\n      o.twitter_base = \"http://\" + s.twitter_url + \"/\";\n      o.user_url = o.twitter_base + o.screen_name;\n      o.tweet_url = o.user_url + \"/status/\" + o.tweet_id;\n      o.reply_url = o.twitter_base + \"intent/tweet?in_reply_to=\" + o.tweet_id;\n      o.retweet_url = o.twitter_base + \"intent/retweet?tweet_id=\" + o.tweet_id;\n      o.favorite_url = o.twitter_base + \"intent/favorite?tweet_id=\" + o.tweet_id;\n      o.retweeted_screen_name = o.retweet && item.retweeted_status.user.screen_name;\n      o.tweet_relative_time = relative_time(o.tweet_time);\n      o.entities = item.entities ? (item.entities.urls || []).concat(item.entities.media || []) : [];\n      o.tweet_raw_text = o.retweet ? 'RT @' + o.retweeted_screen_name + ' ' + item.retweeted_status.text : item.text; // avoid '...' in long retweets\n      o.tweet_text = $([linkURLs(o.tweet_raw_text, o.entities)]).linkUser().linkHash()[0];\n      o.tweet_text_fancy = $([o.tweet_text]).makeHeart()[0];\n\n      // Default spans, and pre-formatted blocks for common layouts\n      o.user = t('<a class=\"tweet_user\" href=\"{user_url}\">{screen_name}</a>', o);\n      o.join = s.join_text ? t(' <span class=\"tweet_join\">{join_text}</span> ', o) : ' ';\n      o.avatar = o.avatar_size ? t('<a class=\"tweet_avatar\" href=\"{user_url}\"><img src=\"{avatar_url}\" height=\"{avatar_size}\" width=\"{avatar_size}\" alt=\"{screen_name}\\'s avatar\" title=\"{screen_name}\\'s avatar\" border=\"0\"/></a>', o) : '';\n      o.time = t('<span class=\"tweet_time\"><a href=\"{tweet_url}\" title=\"view tweet on twitter\">{tweet_relative_time}</a></span>', o);\n      o.text = t('<span class=\"tweet_text\">{tweet_text_fancy}</span>', o);\n      o.reply_action = t('<a class=\"tweet_action tweet_reply\" href=\"{reply_url}\">reply</a>', o);\n      o.retweet_action = t('<a class=\"tweet_action tweet_retweet\" href=\"{retweet_url}\">retweet</a>', o);\n      o.favorite_action = t('<a class=\"tweet_action tweet_favorite\" href=\"{favorite_url}\">favorite</a>', o);\n      return o;\n    }\n    return this.each(function (i, widget) {\n      var list = $('<ul class=\"tweet_list\">');\n      var intro = '<p class=\"tweet_intro\">' + s.intro_text + '</p>';\n      var outro = '<p class=\"tweet_outro\">' + s.outro_text + '</p>';\n      var loading = $('<p class=\"loading\">' + s.loading_text + '</p>');\n      if (s.username && typeof s.username == \"string\") {\n        s.username = [s.username];\n      }\n      $(widget).unbind(\"tweet:load\").bind(\"tweet:load\", function () {\n        if (s.loading_text) $(widget).empty().append(loading);\n        $.ajax({\n          dataType: \"json\",\n          type: \"post\",\n          async: false,\n          url: s.modpath || \"/twitter/\",\n          data: {\n            request: build_api_request()\n          },\n          success: function (data, status) {\n            if (data.message) {\n              console.log(data.message);\n            }\n            var response = data;\n            $(widget).empty().append(list);\n            if (s.intro_text) list.before(intro);\n            list.empty();\n\n            /*\t\t\t\t\t\tif(response.statuses !== undefined) {\n            \t\t\t\t\t\t\tresp = response.statuses;\n            \t\t\t\t\t\t} else if(response.results !== undefined) {\n            \t\t\t\t\t\t\tresp = response.results;\n            \t\t\t\t\t\t} else {\n            \t\t\t\t\t\t\tresp = response;\n            \t\t\t\t\t\t}*/\n            resp = response;\n            var tweets = $.map(resp, extract_template_data);\n            tweets = $.grep(tweets, s.filter).sort(s.comparator).slice(0, s.count);\n            list.append($.map(tweets, function (o) {\n              return \"<li>\" + t(s.template, o) + \"</li>\";\n            }).join('')).children('li:first').addClass('tweet_first').end().children('li:odd').addClass('tweet_even').end().children('li:even').addClass('tweet_odd');\n            if (s.outro_text) list.after(outro);\n            $(widget).trigger(\"loaded\").trigger(tweets ? \"empty\" : \"full\");\n            if (s.refresh_interval) {\n              window.setTimeout(function () {\n                $(widget).trigger(\"tweet:load\");\n              }, 1000 * s.refresh_interval);\n            }\n          }\n        });\n      }).trigger(\"tweet:load\");\n    });\n  };\n});","map":{"version":3,"names":["factory","define","amd","jQuery","$","fn","tweet","o","s","extend","modpath","username","list_id","list","favorites","query","avatar_size","count","fetch","page","retweets","intro_text","outro_text","join_text","auto_join_text_default","auto_join_text_ed","auto_join_text_ing","auto_join_text_reply","auto_join_text_url","loading_text","refresh_interval","twitter_url","twitter_api_url","twitter_search_url","template","comparator","tweet1","tweet2","filter","url_regexp","t","info","result","key","val","replace","RegExp","replacer","regex","replacement","returning","each","push","escapeHTML","linkUser","linkHash","length","join","makeHeart","linkURLs","text","entities","match","url","test","i","entity","expanded_url","display_url","parse_date","date_str","Date","parse","relative_time","date","relative_to","arguments","delta","parseInt","getTime","r","toString","build_auto_join_text","build_api_request","defaults","include_entities","host","parameters","slug","owner_screen_name","include_rts","screen_name","q","extract_avatar_url","item","secure","user","profile_image_url_https","profile_image_url","extract_template_data","source","name","from_user_name","from_user","avatar_url","document","location","protocol","retweet","retweeted_status","tweet_time","created_at","tweet_id","id_str","twitter_base","user_url","tweet_url","reply_url","retweet_url","favorite_url","retweeted_screen_name","tweet_relative_time","urls","concat","media","tweet_raw_text","tweet_text","tweet_text_fancy","avatar","time","reply_action","retweet_action","favorite_action","widget","intro","outro","loading","unbind","bind","empty","append","ajax","dataType","type","async","data","request","success","status","message","console","log","response","before","resp","tweets","map","grep","sort","slice","children","addClass","end","after","trigger","window","setTimeout"],"sources":["/Users/binli/Documents/TravelWebsite/travel_website/src/js/jquery.tweet.js"],"sourcesContent":["// jquery.tweet.js - See http://tweet.seaofclouds.com/ or https://github.com/seaofclouds/tweet for more info\n// Copyright (c) 2008-2012 Todd Matthews & Steve Purcell\n// Modified by Stan Scates for https://github.com/StanScates/Tweet.js-Mod\n\n(function (factory) {\n\tif (typeof define === 'function' && define.amd)\n\tdefine(['jquery'], factory); // AMD support for RequireJS etc.\n\telse\n\tfactory(jQuery);\n}(function ($) {\n\t$.fn.tweet = function(o){\n\t\tvar s = $.extend({\n\t\t\tmodpath: \"php/twitter/cws_tweet.php\",\t\t\t\t// [string]\t relative URL to Tweet.js mod (see https://github.com/StanScates/Tweet.js-Mod)\n\t\t\tusername: null,\t\t\t\t\t\t\t\t\t\t\t\t\t// [string or array] required unless using the 'query' option; one or more twitter screen names (use 'list' option for multiple names, where possible)\n\t\t\tlist_id: null,\t\t\t\t\t\t\t\t\t\t\t\t\t// [integer]\tID of list to fetch when using list functionality\n\t\t\tlist: null,\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// [string]\t optional slug of list belonging to username\n\t\t\tfavorites: false,\t\t\t\t\t\t\t\t\t\t\t\t// [boolean]\tdisplay the user's favorites instead of his tweets\n\t\t\tquery: null,\t\t\t\t\t\t\t\t\t\t\t\t\t\t// [string]\t optional search query (see also: http://search.twitter.com/operators)\n\t\t\tavatar_size: null,\t\t\t\t\t\t\t\t\t\t\t// [integer]\theight and width of avatar if displayed (48px max)\n\t\t\tcount: 3,\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// [integer]\thow many tweets to display?\n\t\t\tfetch: null,\t\t\t\t\t\t\t\t\t\t\t\t\t\t// [integer]\thow many tweets to fetch via the API (set this higher than 'count' if using the 'filter' option)\n\t\t\tpage: 1,\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// [integer]\twhich page of results to fetch (if count != fetch, you'll get unexpected results)\n\t\t\tretweets: true,\t\t\t\t\t\t\t\t\t\t\t\t\t// [boolean]\twhether to fetch (official) retweets (not supported in all display modes)\n\t\t\tintro_text: null,\t\t\t\t\t\t\t\t\t\t\t\t// [string]\t do you want text BEFORE your your tweets?\n\t\t\toutro_text: null,\t\t\t\t\t\t\t\t\t\t\t\t// [string]\t do you want text AFTER your tweets?\n\t\t\tjoin_text:\tnull,\t\t\t\t\t\t\t\t\t\t\t\t// [string]\t optional text in between date and tweet, try setting to \"auto\"\n\t\t\tauto_join_text_default: \"i said,\",\t\t\t// [string]\t auto text for non verb: \"i said\" bullocks\n\t\t\tauto_join_text_ed: \"i\",\t\t\t\t\t\t\t\t\t// [string]\t auto text for past tense: \"i\" surfed\n\t\t\tauto_join_text_ing: \"i am\",\t\t\t\t\t\t\t// [string]\t auto tense for present tense: \"i was\" surfing\n\t\t\tauto_join_text_reply: \"i replied to\",\t\t// [string]\t auto tense for replies: \"i replied to\" @someone \"with\"\n\t\t\tauto_join_text_url: \"i was looking at\",\t// [string]\t auto tense for urls: \"i was looking at\" http:...\n\t\t\tloading_text: null,\t\t\t\t\t\t\t\t\t\t\t// [string]\t optional loading text, displayed while tweets load\n\t\t\trefresh_interval: null ,\t\t\t\t\t\t\t\t// [integer]\toptional number of seconds after which to reload tweets\n\t\t\ttwitter_url: \"twitter.com\",\t\t\t\t\t\t\t// [string]\t custom twitter url, if any (apigee, etc.)\n\t\t\ttwitter_api_url: \"api.twitter.com\",\t\t\t// [string]\t custom twitter api url, if any (apigee, etc.)\n\t\t\ttwitter_search_url: \"api.twitter.com\", \t// [string]\t custom twitter search url, if any (apigee, etc.)\n\t\t\ttemplate: \"{avatar}{time}{join}{text}\",\t// [string or function] template used to construct each tweet <li> - see code for available vars\n\t\t\tcomparator: function(tweet1, tweet2) {\t// [function] comparator used to sort tweets (see Array.sort)\n\t\t\t\treturn tweet2[\"tweet_time\"] - tweet1[\"tweet_time\"];\n\t\t\t},\n\t\t\tfilter: function(tweet) {\t\t\t\t\t\t\t\t// [function] whether or not to include a particular tweet (be sure to also set 'fetch')\n\t\t\t\treturn true;\n\t\t\t}\n\t\t// You can attach callbacks to the following events using jQuery's standard .bind() mechanism:\n\t\t//\t \"loaded\" -- triggered when tweets have been fetched and rendered\n\t\t}, o);\n\n\t\t// See http://daringfireball.net/2010/07/improved_regex_for_matching_urls\n\t\tvar url_regexp = /\\b((?:[a-z][\\w-]+:(?:\\/{1,3}|[a-z0-9%])|www\\d{0,3}[.]|[a-z0-9.\\-]+[.][a-z]{2,4}\\/)(?:[^\\s()<>]+|\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\))+(?:\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\)|[^\\s`!()\\[\\]{};:'\".,<>?«»“”‘’]))/gi;\n\n\t\t// Expand values inside simple string templates with {placeholders}\n\t\tfunction t(template, info) {\n\t\t\tif (typeof template === \"string\") {\n\t\t\t\tvar result = template;\n\t\t\t\tfor(var key in info) {\n\t\t\t\t\tvar val = info[key];\n\t\t\t\t\tresult = result.replace(new RegExp('{'+key+'}','g'), val === null ? '' : val);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t} else return template(info);\n\t\t}\n\t\t// Export the t function for use when passing a function as the 'template' option\n\t\t$.extend({tweet: {t: t}});\n\n\t\tfunction replacer (regex, replacement) {\n\t\t\treturn function() {\n\t\t\t\tvar returning = [];\n\t\t\t\tthis.each(function() {\n\t\t\t\t\treturning.push(this.replace(regex, replacement));\n\t\t\t\t});\n\t\t\t\treturn $(returning);\n\t\t\t};\n\t\t}\n\n\t\tfunction escapeHTML(s) {\n\t\t\treturn s.replace(/</g,\"&lt;\").replace(/>/g,\"^&gt;\");\n\t\t}\n\n\t\t$.fn.extend({\n\t\t\tlinkUser: replacer(/(^|[\\W])@(\\w+)/gi, \"$1<span class=\\\"at\\\">@</span><a href=\\\"http://\"+s.twitter_url+\"/$2\\\">$2</a>\"),\n\t\t\t// Support various latin1 (\\u00**) and arabic (\\u06**) alphanumeric chars\n\t\t\tlinkHash: replacer(/(?:^| )[\\#]+([\\w\\u00c0-\\u00d6\\u00d8-\\u00f6\\u00f8-\\u00ff\\u0600-\\u06ff]+)/gi,\n\t\t\t\t' <a href=\"https://twitter.com/search?q=%23$1'+((s.username && s.username.length == 1 && !s.list) ? '&from='+s.username.join(\"%2BOR%2B\") : '')+'\" class=\"tweet_hashtag\">#$1</a>'),\n\t\t\tmakeHeart: replacer(/(&lt;)+[3]/gi, \"<tt class='heart'>&#x2665;</tt>\")\n\t\t});\n\n\t\tfunction linkURLs(text, entities) {\n\t\t\treturn text.replace(url_regexp, function(match) {\n\t\t\t\tvar url = (/^[a-z]+:/i).test(match) ? match : \"http://\"+match;\n\t\t\t\tvar text = match;\n\t\t\t\tfor(var i = 0; i < entities.length; ++i) {\n\t\t\t\t\tvar entity = entities[i];\n\t\t\t\t\tif (entity.url == url && entity.expanded_url) {\n\t\t\t\t\t\turl = entity.expanded_url;\n\t\t\t\t\t\ttext = entity.display_url;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn \"<a href=\\\"\"+escapeHTML(url)+\"\\\">\"+escapeHTML(text)+\"</a>\";\n\t\t\t});\n\t\t}\n\n\t\tfunction parse_date(date_str) {\n\t\t\t// The non-search twitter APIs return inconsistently-formatted dates, which Date.parse\n\t\t\t// cannot handle in IE. We therefore perform the following transformation:\n\t\t\t// \"Wed Apr 29 08:53:31 +0000 2009\" => \"Wed, Apr 29 2009 08:53:31 +0000\"\n\t\t\treturn Date.parse(date_str.replace(/^([a-z]{3})( [a-z]{3} \\d\\d?)(.*)( \\d{4})$/i, '$1,$2$4$3'));\n\t\t}\n\n\t\tfunction relative_time(date) {\n\t\t\tvar relative_to = (arguments.length > 1) ? arguments[1] : new Date();\n\t\t\tvar delta = parseInt((relative_to.getTime() - date) / 1000, 10);\n\t\t\tvar r = '';\n\t\t\tif (delta < 1) {\n\t\t\t\tr = 'just now';\n\t\t\t} else if (delta < 60) {\n\t\t\t\tr = delta + ' seconds ago';\n\t\t\t} else if(delta < 120) {\n\t\t\t\tr = 'about a minute ago';\n\t\t\t} else if(delta < (45*60)) {\n\t\t\t\tr = 'about ' + (parseInt(delta / 60, 10)).toString() + ' minutes ago';\n\t\t\t} else if(delta < (2*60*60)) {\n\t\t\t\tr = 'about an hour ago';\n\t\t\t} else if(delta < (24*60*60)) {\n\t\t\t\tr = 'about ' + (parseInt(delta / 3600, 10)).toString() + ' hours ago';\n\t\t\t} else if(delta < (48*60*60)) {\n\t\t\t\tr = 'about a day ago';\n\t\t\t} else {\n\t\t\t\tr = 'about ' + (parseInt(delta / 86400, 10)).toString() + ' days ago';\n\t\t\t}\n\t\t\treturn r;\n\t\t}\n\n\t\tfunction build_auto_join_text(text) {\n\t\t\tif (text.match(/^(@([A-Za-z0-9-_]+)) .*/i)) {\n\t\t\t\treturn s.auto_join_text_reply;\n\t\t\t} else if (text.match(url_regexp)) {\n\t\t\t\treturn s.auto_join_text_url;\n\t\t\t} else if (text.match(/^((\\w+ed)|just) .*/im)) {\n\t\t\t\treturn s.auto_join_text_ed;\n\t\t\t} else if (text.match(/^(\\w*ing) .*/i)) {\n\t\t\t\treturn s.auto_join_text_ing;\n\t\t\t} else {\n\t\t\t\treturn s.auto_join_text_default;\n\t\t\t}\n\t\t}\n\n\t\tfunction build_api_request() {\n\t\t\tvar modpath = s.modpath,\n\t\t\t\tcount = (s.fetch === null) ? s.count : s.fetch,\n\t\t\t\tdefaults = {\n\t\t\t\t\tinclude_entities: 1\n\t\t\t\t};\n\n\t\t\tif (s.list) {\n\t\t\t\treturn {\n\t\t\t\t\thost: s.twitter_api_url,\n\t\t\t\t\turl: \"/1.1/lists/statuses.json\",\n\t\t\t\t\tparameters: $.extend({}, defaults, {\n\t\t\t\t\t\tlist_id: s.list_id,\n\t\t\t\t\t\tslug: s.list,\n\t\t\t\t\t\towner_screen_name: s.username,\n\t\t\t\t\t\tpage: s.page,\n\t\t\t\t\t\tcount: count,\n\t\t\t\t\t\tinclude_rts: (s.retweets ? 1 : 0)\n\t\t\t\t\t})\n\t\t\t\t};\n\t\t\t} else if (s.favorites) {\n\t\t\t\treturn {\n\t\t\t\t\thost: s.twitter_api_url,\n\t\t\t\t\turl: \"/1.1/favorites/list.json\",\n\t\t\t\t\tparameters: $.extend({}, defaults, {\n\t\t\t\t\t\tlist_id: s.list_id,\n\t\t\t\t\t\tscreen_name: s.username,\n\t\t\t\t\t\tpage: s.page,\n\t\t\t\t\t\tcount: count\n\t\t\t\t\t})\n\t\t\t\t};\n\t\t\t} else if (s.query === null && s.username.length === 1) {\n\t\t\t\treturn {\n\t\t\t\t\thost: s.twitter_api_url,\n\t\t\t\t\turl: \"/1.1/statuses/user_timeline.json\",\n\t\t\t\t\tparameters: $.extend({}, defaults, {\n\t\t\t\t\t\tscreen_name: s.username,\n\t\t\t\t\t\tpage: s.page,\n\t\t\t\t\t\tcount: count,\n\t\t\t\t\t\tinclude_rts: (s.retweets ? 1 : 0)\n\t\t\t\t\t})\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tvar query = (s.query || 'from:'+s.username.join(' OR from:'));\n\t\t\t\treturn {\n\t\t\t\t\thost: s.twitter_search_url,\n\t\t\t\t\turl: \"/1.1/search/tweets.json\",\n\t\t\t\t\tparameters: $.extend({}, defaults, {\n\t\t\t\t\t\tq: query,\n\t\t\t\t\t\tcount: count\n\t\t\t\t\t})\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\tfunction extract_avatar_url(item, secure) {\n\t\t\tif (secure) {\n\t\t\t\treturn ('user' in item) ?\n\t\t\t\t\titem.user.profile_image_url_https :\n\t\t\t\t\textract_avatar_url(item, false).\n\t\t\t\t\treplace(/^http:\\/\\/[a-z0-9]{1,3}\\.twimg\\.com\\//, \"https://s3.amazonaws.com/twitter_production/\");\n\t\t\t} else {\n\t\t\t\treturn item.profile_image_url || item.user.profile_image_url;\n\t\t\t}\n\t\t}\n\n\t\t// Convert twitter API objects into data available for\n\t\t// constructing each tweet <li> using a template\n\t\tfunction extract_template_data(item) {\n\t\t\tvar o = {};\n\t\t\to.item = item;\n\t\t\to.source = item.source;\n\t\t\t// The actual user name is not returned by all Twitter APIs, so please do not file an issue if it is empty.\n\t\t\to.name = item.from_user_name || item.user.name;\n\t\t\to.screen_name = item.from_user || item.user.screen_name;\n\t\t\to.avatar_size = s.avatar_size;\n\t\t\to.avatar_url = extract_avatar_url(item, (document.location.protocol === 'https:'));\n\t\t\to.retweet = typeof(item.retweeted_status) != 'undefined';\n\t\t\to.tweet_time = parse_date(item.created_at);\n\t\t\to.join_text = s.join_text == \"auto\" ? build_auto_join_text(item.text) : s.join_text;\n\t\t\to.tweet_id = item.id_str;\n\t\t\to.twitter_base = \"http://\"+s.twitter_url+\"/\";\n\t\t\to.user_url = o.twitter_base+o.screen_name;\n\t\t\to.tweet_url = o.user_url+\"/status/\"+o.tweet_id;\n\t\t\to.reply_url = o.twitter_base+\"intent/tweet?in_reply_to=\"+o.tweet_id;\n\t\t\to.retweet_url = o.twitter_base+\"intent/retweet?tweet_id=\"+o.tweet_id;\n\t\t\to.favorite_url = o.twitter_base+\"intent/favorite?tweet_id=\"+o.tweet_id;\n\t\t\to.retweeted_screen_name = o.retweet && item.retweeted_status.user.screen_name;\n\t\t\to.tweet_relative_time = relative_time(o.tweet_time);\n\t\t\to.entities = item.entities ? (item.entities.urls || []).concat(item.entities.media || []) : [];\n\t\t\to.tweet_raw_text = o.retweet ? ('RT @'+o.retweeted_screen_name+' '+item.retweeted_status.text) : item.text; // avoid '...' in long retweets\n\t\t\to.tweet_text = $([linkURLs(o.tweet_raw_text, o.entities)]).linkUser().linkHash()[0];\n\t\t\to.tweet_text_fancy = $([o.tweet_text]).makeHeart()[0];\n\n\t\t\t// Default spans, and pre-formatted blocks for common layouts\n\t\t\to.user = t('<a class=\"tweet_user\" href=\"{user_url}\">{screen_name}</a>', o);\n\t\t\to.join = s.join_text ? t(' <span class=\"tweet_join\">{join_text}</span> ', o) : ' ';\n\t\t\to.avatar = o.avatar_size ?\n\t\t\t\tt('<a class=\"tweet_avatar\" href=\"{user_url}\"><img src=\"{avatar_url}\" height=\"{avatar_size}\" width=\"{avatar_size}\" alt=\"{screen_name}\\'s avatar\" title=\"{screen_name}\\'s avatar\" border=\"0\"/></a>', o) : '';\n\t\t\to.time = t('<span class=\"tweet_time\"><a href=\"{tweet_url}\" title=\"view tweet on twitter\">{tweet_relative_time}</a></span>', o);\n\t\t\to.text = t('<span class=\"tweet_text\">{tweet_text_fancy}</span>', o);\n\t\t\to.reply_action = t('<a class=\"tweet_action tweet_reply\" href=\"{reply_url}\">reply</a>', o);\n\t\t\to.retweet_action = t('<a class=\"tweet_action tweet_retweet\" href=\"{retweet_url}\">retweet</a>', o);\n\t\t\to.favorite_action = t('<a class=\"tweet_action tweet_favorite\" href=\"{favorite_url}\">favorite</a>', o);\n\t\t\treturn o;\n\t\t}\n\n\t\treturn this.each(function(i, widget){\n\t\t\tvar list = $('<ul class=\"tweet_list\">');\n\t\t\tvar intro = '<p class=\"tweet_intro\">'+s.intro_text+'</p>';\n\t\t\tvar outro = '<p class=\"tweet_outro\">'+s.outro_text+'</p>';\n\t\t\tvar loading = $('<p class=\"loading\">'+s.loading_text+'</p>');\n\n\t\t\tif(s.username && typeof(s.username) == \"string\"){\n\t\t\t\ts.username = [s.username];\n\t\t\t}\n\n\t\t\t$(widget).unbind(\"tweet:load\").bind(\"tweet:load\", function(){\n\t\t\t\tif (s.loading_text) $(widget).empty().append(loading);\n\n\t\t\t\t$.ajax({\n\t\t\t\t\tdataType: \"json\",\n\t\t\t\t\ttype: \"post\",\n\t\t\t\t\tasync: false,\n\t\t\t\t\turl: s.modpath || \"/twitter/\",\n\t\t\t\t\tdata: { request: build_api_request() },\n\t\t\t\t\tsuccess: function(data, status) {\n\n\t\t\t\t\t\tif(data.message) {\n\t\t\t\t\t\t\tconsole.log(data.message);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar response = data;\n\t\t\t\t\t\t$(widget).empty().append(list);\n\t\t\t\t\t\tif (s.intro_text) list.before(intro);\n\t\t\t\t\t\tlist.empty();\n\n/*\t\t\t\t\t\tif(response.statuses !== undefined) {\n\t\t\t\t\t\t\tresp = response.statuses;\n\t\t\t\t\t\t} else if(response.results !== undefined) {\n\t\t\t\t\t\t\tresp = response.results;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresp = response;\n\t\t\t\t\t\t}*/\n\t\t\t\t\t\tresp = response;\n\n\t\t\t\t\t\tvar tweets = $.map(resp, extract_template_data);\n\t\t\t\t\t\t\ttweets = $.grep(tweets, s.filter).sort(s.comparator).slice(0, s.count);\n\n\t\t\t\t\t\tlist.append($.map(tweets, function(o) { return \"<li>\" + t(s.template, o) + \"</li>\"; }).join('')).\n\t\t\t\t\t\t\tchildren('li:first').addClass('tweet_first').end().\n\t\t\t\t\t\t\tchildren('li:odd').addClass('tweet_even').end().\n\t\t\t\t\t\t\tchildren('li:even').addClass('tweet_odd');\n\n\t\t\t\t\t\tif (s.outro_text) list.after(outro);\n\t\t\t\t\t\t$(widget).trigger(\"loaded\").trigger((tweets ? \"empty\" : \"full\"));\n\t\t\t\t\t\tif (s.refresh_interval) {\n\t\t\t\t\t\t\twindow.setTimeout(function() { $(widget).trigger(\"tweet:load\"); }, 1000 * s.refresh_interval);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}).trigger(\"tweet:load\");\n\t\t});\n\t};\n}));"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
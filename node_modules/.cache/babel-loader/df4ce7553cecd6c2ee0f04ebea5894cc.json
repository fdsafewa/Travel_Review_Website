{"ast":null,"code":"(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define([], factory);\n  } else if (typeof exports === 'object') {\n    module.exports = factory();\n  } else {\n    root.loadjs = factory();\n  }\n})(this, function () {\n  /**\n   * Global dependencies.\n   * @global {Object} document - DOM\n   */\n\n  var devnull = function () {},\n    bundleIdCache = {},\n    bundleResultCache = {},\n    bundleCallbackQueue = {};\n\n  /**\n   * Subscribe to bundle load event.\n   * @param {string[]} bundleIds - Bundle ids\n   * @param {Function} callbackFn - The callback function\n   */\n  function subscribe(bundleIds, callbackFn) {\n    // listify\n    bundleIds = bundleIds.push ? bundleIds : [bundleIds];\n    var depsNotFound = [],\n      i = bundleIds.length,\n      numWaiting = i,\n      fn,\n      bundleId,\n      r,\n      q;\n\n    // define callback function\n    fn = function (bundleId, pathsNotFound) {\n      if (pathsNotFound.length) depsNotFound.push(bundleId);\n      numWaiting--;\n      if (!numWaiting) callbackFn(depsNotFound);\n    };\n\n    // register callback\n    while (i--) {\n      bundleId = bundleIds[i];\n\n      // execute callback if in result cache\n      r = bundleResultCache[bundleId];\n      if (r) {\n        fn(bundleId, r);\n        continue;\n      }\n\n      // add to callback queue\n      q = bundleCallbackQueue[bundleId] = bundleCallbackQueue[bundleId] || [];\n      q.push(fn);\n    }\n  }\n\n  /**\n   * Publish bundle load event.\n   * @param {string} bundleId - Bundle id\n   * @param {string[]} pathsNotFound - List of files not found\n   */\n  function publish(bundleId, pathsNotFound) {\n    // exit if id isn't defined\n    if (!bundleId) return;\n    var q = bundleCallbackQueue[bundleId];\n\n    // cache result\n    bundleResultCache[bundleId] = pathsNotFound;\n\n    // exit if queue is empty\n    if (!q) return;\n\n    // empty callback queue\n    while (q.length) {\n      q[0](bundleId, pathsNotFound);\n      q.splice(0, 1);\n    }\n  }\n\n  /**\n   * Execute callbacks.\n   * @param {Object or Function} args - The callback args\n   * @param {string[]} depsNotFound - List of dependencies not found\n   */\n  function executeCallbacks(args, depsNotFound) {\n    // accept function as argument\n    if (args.call) args = {\n      success: args\n    };\n\n    // success and error callbacks\n    if (depsNotFound.length) (args.error || devnull)(depsNotFound);else (args.success || devnull)(args);\n  }\n\n  /**\n   * Load individual file.\n   * @param {string} path - The file path\n   * @param {Function} callbackFn - The callback function\n   */\n  function loadFile(path, callbackFn, args, numTries) {\n    var doc = document,\n      async = args.async,\n      maxTries = (args.numRetries || 0) + 1,\n      beforeCallbackFn = args.before || devnull,\n      pathname = path.replace(/[\\?|#].*$/, ''),\n      pathStripped = path.replace(/^(css|img|module|nomodule)!/, ''),\n      isLegacyIECss,\n      hasModuleSupport,\n      e;\n    numTries = numTries || 0;\n    if (/(^css!|\\.css$)/.test(pathname)) {\n      // css\n      e = doc.createElement('link');\n      e.rel = 'stylesheet';\n      e.href = pathStripped;\n\n      // tag IE9+\n      isLegacyIECss = 'hideFocus' in e;\n\n      // use preload in IE Edge (to detect load errors)\n      if (isLegacyIECss && e.relList) {\n        isLegacyIECss = 0;\n        e.rel = 'preload';\n        e.as = 'style';\n      }\n    } else if (/(^img!|\\.(png|gif|jpg|svg|webp)$)/.test(pathname)) {\n      // image\n      e = doc.createElement('img');\n      e.src = pathStripped;\n    } else {\n      // javascript\n      e = doc.createElement('script');\n      e.src = pathStripped;\n      e.async = async === undefined ? true : async;\n\n      // handle es modules\n      // modern browsers:\n      //   module: add to dom with type=\"module\"\n      //   nomodule: call success() callback without adding to dom\n      // legacy browsers:\n      //   module: call success() callback without adding to dom\n      //   nomodule: add to dom with default type (\"text/javascript\")\n      hasModuleSupport = 'noModule' in e;\n      if (/^module!/.test(pathname)) {\n        if (!hasModuleSupport) return callbackFn(path, 'l');\n        e.type = \"module\";\n      } else if (/^nomodule!/.test(pathname) && hasModuleSupport) return callbackFn(path, 'l');\n    }\n    e.onload = e.onerror = e.onbeforeload = function (ev) {\n      var result = ev.type[0];\n\n      // treat empty stylesheets as failures to get around lack of onerror\n      // support in IE9-11\n      if (isLegacyIECss) {\n        try {\n          if (!e.sheet.cssText.length) result = 'e';\n        } catch (x) {\n          // sheets objects created from load errors don't allow access to\n          // `cssText` (unless error is Code:18 SecurityError)\n          if (x.code != 18) result = 'e';\n        }\n      }\n\n      // handle retries in case of load failure\n      if (result == 'e') {\n        // increment counter\n        numTries += 1;\n\n        // exit function and try again\n        if (numTries < maxTries) {\n          return loadFile(path, callbackFn, args, numTries);\n        }\n      } else if (e.rel == 'preload' && e.as == 'style') {\n        // activate preloaded stylesheets\n        return e.rel = 'stylesheet'; // jshint ignore:line\n      }\n\n      // execute callback\n      callbackFn(path, result, ev.defaultPrevented);\n    };\n\n    // add to document (unless callback returns `false`)\n    if (beforeCallbackFn(path, e) !== false) doc.head.appendChild(e);\n  }\n\n  /**\n   * Load multiple files.\n   * @param {string[]} paths - The file paths\n   * @param {Function} callbackFn - The callback function\n   */\n  function loadFiles(paths, callbackFn, args) {\n    // listify paths\n    paths = paths.push ? paths : [paths];\n    var numWaiting = paths.length,\n      x = numWaiting,\n      pathsNotFound = [],\n      fn,\n      i;\n\n    // define callback function\n    fn = function (path, result, defaultPrevented) {\n      // handle error\n      if (result == 'e') pathsNotFound.push(path);\n\n      // handle beforeload event. If defaultPrevented then that means the load\n      // will be blocked (ex. Ghostery/ABP on Safari)\n      if (result == 'b') {\n        if (defaultPrevented) pathsNotFound.push(path);else return;\n      }\n      numWaiting--;\n      if (!numWaiting) callbackFn(pathsNotFound);\n    };\n\n    // load scripts\n    for (i = 0; i < x; i++) loadFile(paths[i], fn, args);\n  }\n\n  /**\n   * Initiate script load and register bundle.\n   * @param {(string|string[])} paths - The file paths\n   * @param {(string|Function|Object)} [arg1] - The (1) bundleId or (2) success\n   *   callback or (3) object literal with success/error arguments, numRetries,\n   *   etc.\n   * @param {(Function|Object)} [arg2] - The (1) success callback or (2) object\n   *   literal with success/error arguments, numRetries, etc.\n   */\n  function loadjs(paths, arg1, arg2) {\n    var bundleId, args;\n\n    // bundleId (if string)\n    if (arg1 && arg1.trim) bundleId = arg1;\n\n    // args (default is {})\n    args = (bundleId ? arg2 : arg1) || {};\n\n    // throw error if bundle is already defined\n    if (bundleId) {\n      if (bundleId in bundleIdCache) {\n        throw \"LoadJS\";\n      } else {\n        bundleIdCache[bundleId] = true;\n      }\n    }\n    function loadFn(resolve, reject) {\n      loadFiles(paths, function (pathsNotFound) {\n        // execute callbacks\n        executeCallbacks(args, pathsNotFound);\n\n        // resolve Promise\n        if (resolve) {\n          executeCallbacks({\n            success: resolve,\n            error: reject\n          }, pathsNotFound);\n        }\n\n        // publish bundle load event\n        publish(bundleId, pathsNotFound);\n      }, args);\n    }\n    if (args.returnPromise) return new Promise(loadFn);else loadFn();\n  }\n\n  /**\n   * Execute callbacks when dependencies have been satisfied.\n   * @param {(string|string[])} deps - List of bundle ids\n   * @param {Object} args - success/error arguments\n   */\n  loadjs.ready = function ready(deps, args) {\n    // subscribe to bundle load event\n    subscribe(deps, function (depsNotFound) {\n      // execute callbacks\n      executeCallbacks(args, depsNotFound);\n    });\n    return loadjs;\n  };\n\n  /**\n   * Manually satisfy bundle dependencies.\n   * @param {string} bundleId - The bundle id\n   */\n  loadjs.done = function done(bundleId) {\n    publish(bundleId, []);\n  };\n\n  /**\n   * Reset loadjs dependencies statuses\n   */\n  loadjs.reset = function reset() {\n    bundleIdCache = {};\n    bundleResultCache = {};\n    bundleCallbackQueue = {};\n  };\n\n  /**\n   * Determine if bundle has already been defined\n   * @param String} bundleId - The bundle id\n   */\n  loadjs.isDefined = function isDefined(bundleId) {\n    return bundleId in bundleIdCache;\n  };\n\n  // export\n  return loadjs;\n});","map":null,"metadata":{},"sourceType":"script"}